@import 'variables';
@import "fa-variables";
@import 'placeholders';

@function headers() {
  @return 'h1, h2, h3, h4, h5';
}

@function em($font-size, $context: $font-size-base) {
  @return #{$font-size/$context}em
}

@function rem($font-size, $context: $font-size-base) {
  @return #{$font-size/$context}rem
}

@function icon($character){
  @return unquote("\"")+unquote(str-insert($character,"\\", 1))+unquote("\"");
}

@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin font-awesome($ico) {
  content: icon($ico);
  font-family: FontAwesome, serif;
  display: inline-block;
  font-style: normal;
  position: relative;
  font-weight: normal;
  -webkit-font-smoothing: antialiased;
}

@mixin respond-to($media) {
  @if $media == phone {
    @media (max-width: $screen-xs - 1) { @content; }
  }
  @else if $media == tablet-portrait {
    @media (max-width: $screen-sm - 1) { @content; }
  }
  @else if $media == tablet-landscape-desktop {
    @media (min-width: $screen-sm) and (max-width: $screen-md - 1) { @content; }
  }
  @else if $media == desktop {
    @media (min-width: $screen-sm) { @content; }
  }
  @else if $media == large-desktop {
    @media (min-width: $screen-lg) { @content; }
  }
}

@mixin wrapped {
  box-sizing: border-box;
  margin-left: auto !important; //overwrite .alpha styles
  margin-right: auto !important; //overwrite .alpha styles
  max-width: $wrapper-width;
  padding-left: $gutter;
  padding-right: $gutter;
}

// Simple column system using flexbox
// Usage:
// ul.someclass {
//   @include row;
//   > li {
//     @include column(1/3);
//     @media (screen and max-width: 768px) {
//       widht: 100%;
//     }
//   }
// }

@mixin row($gut: $gutter-default) {
  // `$gut` can be a custom gutter that'll be used by
  // `column` mixin until it's reseted with `reset-gutter`
  $gutter: $gut !global;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  margin: $gutter * -0.5;
  width: auto;

  &:before,
  &:after {
    content: normal;
  }
}

@mixin column($size, $gut: $gutter) {
  padding: $gutter * 0.5;
  box-sizing: border-box;
  width: percentage($size);
}

// just reset gutter to the default value
@mixin reset-gutter() {
  $gutter: $gutter-default !global;
}

// apply the default column variations for list components
// Usage:
// .articleList {
//   @include base-column-variations('.articleList-article');
// }
// will generate a default .articleList-article with 2 columns and
// .articleList.cols-3, .articleList.cols-4 ... .articleList.cols-6 variations

// set the amount of columns variations
$default-cols: (
  3: (phone: 1, tablet: 2),
  4: (phone: 1, tablet: 2),
  5: (phone: 1, tablet: 2),
  6: (phone: 1, tablet: 2)
);

@mixin base-column-variations($child, $cols: $default-cols) {

  // default amount
  #{$child} {
    @include column(1 / 2);

    @include respond-to(tablet-portrait) {
      width: 100%;
    }
  }

  @each $i, $val in $cols {
    &.cols-#{$i} #{$child} {
      @include column(1 / $i);

      @if (map-get($val, tablet)) {
        @include respond-to(tablet-portrait) {
          width: percentage( 1 / map-get($val, tablet) );
        }
      }

      @if (map-get($val, phone)) {
        @include respond-to(phone) {
          width: percentage( 1 / map-get($val, phone) );
        }
      }
    }
  }
}

@mixin carousel-arrows($button-size: 40px) {
  .previous,
  .next {
    background: none;
    border: 0;
    font-size: $button-size;
    line-height: 1;
    padding: 0 1px; // workaround to avoid pixel glich
    transition: opacity 0.3s $ease-out;
    opacity: 0.8;

    &:before {
      display: block;
      vertical-align: bottom;
      color: $gray;
    }

    &.disabled {
      opacity: 0.2;
    }
  }

  .previous {
    left: 0;

    &:before {
      @include font-awesome($fa-var-chevron-circle-left);
    }
  }

  .next {
    right: 0;

    &:before {
      @include font-awesome($fa-var-chevron-circle-right);
    }
  }
}
